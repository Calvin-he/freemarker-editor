/*
* generated by Xtext
*/
package org.github.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class FreemarkerEditorGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class FreemarkerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Freemarker");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Freemarker:
		//	elements+=Element*;
		public ParserRule getRule() { return rule; }

		//elements+=Element*
		public Assignment getElementsAssignment() { return cElementsAssignment; }

		//Element
		public RuleCall getElementsElementParserRuleCall_0() { return cElementsElementParserRuleCall_0; }
	}

	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrintParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCommentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTagParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTextParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Element:
		//	Print | Comment | Tag | Text;
		public ParserRule getRule() { return rule; }

		//Print | Comment | Tag | Text
		public Alternatives getAlternatives() { return cAlternatives; }

		//Print
		public RuleCall getPrintParserRuleCall_0() { return cPrintParserRuleCall_0; }

		//Comment
		public RuleCall getCommentParserRuleCall_1() { return cCommentParserRuleCall_1; }

		//Tag
		public RuleCall getTagParserRuleCall_2() { return cTagParserRuleCall_2; }

		//Text
		public RuleCall getTextParserRuleCall_3() { return cTextParserRuleCall_3; }
	}

	public class PrintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Print");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPRINT_STARTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionPrintContentParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final RuleCall cPRINT_ENDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Print:
		//	PRINT_START expression=PrintContent PRINT_END;
		public ParserRule getRule() { return rule; }

		//PRINT_START expression=PrintContent PRINT_END
		public Group getGroup() { return cGroup; }

		//PRINT_START
		public RuleCall getPRINT_STARTTerminalRuleCall_0() { return cPRINT_STARTTerminalRuleCall_0; }

		//expression=PrintContent
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//PrintContent
		public RuleCall getExpressionPrintContentParserRuleCall_1_0() { return cExpressionPrintContentParserRuleCall_1_0; }

		//PRINT_END
		public RuleCall getPRINT_ENDTerminalRuleCall_2() { return cPRINT_ENDTerminalRuleCall_2; }
	}

	public class PrintContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrintContent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCHARTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCOMMENT_OPENTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCOMMENT_CLOSETerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTAG_OPEN_STARTTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTAG_CLOSE_STARTTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cPRINT_STARTTerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cTAG_ENDTerminalRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//PrintContent returns ecore::EString:
		//	(CHAR | COMMENT_OPEN | COMMENT_CLOSE | TAG_OPEN_START | TAG_CLOSE_START | PRINT_START | TAG_END)+;
		public ParserRule getRule() { return rule; }

		//(CHAR | COMMENT_OPEN | COMMENT_CLOSE | TAG_OPEN_START | TAG_CLOSE_START | PRINT_START | TAG_END)+
		public Alternatives getAlternatives() { return cAlternatives; }

		//CHAR
		public RuleCall getCHARTerminalRuleCall_0() { return cCHARTerminalRuleCall_0; }

		//COMMENT_OPEN
		public RuleCall getCOMMENT_OPENTerminalRuleCall_1() { return cCOMMENT_OPENTerminalRuleCall_1; }

		//COMMENT_CLOSE
		public RuleCall getCOMMENT_CLOSETerminalRuleCall_2() { return cCOMMENT_CLOSETerminalRuleCall_2; }

		//TAG_OPEN_START
		public RuleCall getTAG_OPEN_STARTTerminalRuleCall_3() { return cTAG_OPEN_STARTTerminalRuleCall_3; }

		//TAG_CLOSE_START
		public RuleCall getTAG_CLOSE_STARTTerminalRuleCall_4() { return cTAG_CLOSE_STARTTerminalRuleCall_4; }

		//PRINT_START
		public RuleCall getPRINT_STARTTerminalRuleCall_5() { return cPRINT_STARTTerminalRuleCall_5; }

		//TAG_END
		public RuleCall getTAG_ENDTerminalRuleCall_6() { return cTAG_ENDTerminalRuleCall_6; }
	}

	public class TagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Tag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpenTagAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpenTagOpenTagParserRuleCall_0_0 = (RuleCall)cOpenTagAssignment_0.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsElementParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		private final Assignment cCloseTagAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCloseTagCloseTagParserRuleCall_2_0 = (RuleCall)cCloseTagAssignment_2.eContents().get(0);
		
		//Tag:
		//	openTag=OpenTag elements+=Element* closeTag=CloseTag;
		public ParserRule getRule() { return rule; }

		//openTag=OpenTag elements+=Element* closeTag=CloseTag
		public Group getGroup() { return cGroup; }

		//openTag=OpenTag
		public Assignment getOpenTagAssignment_0() { return cOpenTagAssignment_0; }

		//OpenTag
		public RuleCall getOpenTagOpenTagParserRuleCall_0_0() { return cOpenTagOpenTagParserRuleCall_0_0; }

		//elements+=Element*
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }

		//Element
		public RuleCall getElementsElementParserRuleCall_1_0() { return cElementsElementParserRuleCall_1_0; }

		//closeTag=CloseTag
		public Assignment getCloseTagAssignment_2() { return cCloseTagAssignment_2; }

		//CloseTag
		public RuleCall getCloseTagCloseTagParserRuleCall_2_0() { return cCloseTagCloseTagParserRuleCall_2_0; }
	}

	public class TagPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TagPart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOpenTagParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCloseTagParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TagPart:
		//	OpenTag | CloseTag;
		public ParserRule getRule() { return rule; }

		//OpenTag | CloseTag
		public Alternatives getAlternatives() { return cAlternatives; }

		//OpenTag
		public RuleCall getOpenTagParserRuleCall_0() { return cOpenTagParserRuleCall_0; }

		//CloseTag
		public RuleCall getCloseTagParserRuleCall_1() { return cCloseTagParserRuleCall_1; }
	}

	public class OpenTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpenTag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTAG_OPEN_STARTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cContentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContentTagContentParserRuleCall_1_0 = (RuleCall)cContentAssignment_1.eContents().get(0);
		private final RuleCall cTAG_ENDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//OpenTag:
		//	TAG_OPEN_START content=TagContent TAG_END;
		public ParserRule getRule() { return rule; }

		//TAG_OPEN_START content=TagContent TAG_END
		public Group getGroup() { return cGroup; }

		//TAG_OPEN_START
		public RuleCall getTAG_OPEN_STARTTerminalRuleCall_0() { return cTAG_OPEN_STARTTerminalRuleCall_0; }

		//content=TagContent
		public Assignment getContentAssignment_1() { return cContentAssignment_1; }

		//TagContent
		public RuleCall getContentTagContentParserRuleCall_1_0() { return cContentTagContentParserRuleCall_1_0; }

		//TAG_END
		public RuleCall getTAG_ENDTerminalRuleCall_2() { return cTAG_ENDTerminalRuleCall_2; }
	}

	public class CloseTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CloseTag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTAG_CLOSE_STARTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cContentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContentTagContentParserRuleCall_1_0 = (RuleCall)cContentAssignment_1.eContents().get(0);
		private final RuleCall cTAG_ENDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//CloseTag:
		//	TAG_CLOSE_START content=TagContent TAG_END;
		public ParserRule getRule() { return rule; }

		//TAG_CLOSE_START content=TagContent TAG_END
		public Group getGroup() { return cGroup; }

		//TAG_CLOSE_START
		public RuleCall getTAG_CLOSE_STARTTerminalRuleCall_0() { return cTAG_CLOSE_STARTTerminalRuleCall_0; }

		//content=TagContent
		public Assignment getContentAssignment_1() { return cContentAssignment_1; }

		//TagContent
		public RuleCall getContentTagContentParserRuleCall_1_0() { return cContentTagContentParserRuleCall_1_0; }

		//TAG_END
		public RuleCall getTAG_ENDTerminalRuleCall_2() { return cTAG_ENDTerminalRuleCall_2; }
	}

	public class TagContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TagContent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCHARTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCOMMENT_OPENTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCOMMENT_CLOSETerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTAG_OPEN_STARTTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTAG_CLOSE_STARTTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cPRINT_STARTTerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cPRINT_ENDTerminalRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//TagContent returns ecore::EString:
		//	(CHAR | COMMENT_OPEN | COMMENT_CLOSE | TAG_OPEN_START | TAG_CLOSE_START | PRINT_START | PRINT_END)+;
		public ParserRule getRule() { return rule; }

		//(CHAR | COMMENT_OPEN | COMMENT_CLOSE | TAG_OPEN_START | TAG_CLOSE_START | PRINT_START | PRINT_END)+
		public Alternatives getAlternatives() { return cAlternatives; }

		//CHAR
		public RuleCall getCHARTerminalRuleCall_0() { return cCHARTerminalRuleCall_0; }

		//COMMENT_OPEN
		public RuleCall getCOMMENT_OPENTerminalRuleCall_1() { return cCOMMENT_OPENTerminalRuleCall_1; }

		//COMMENT_CLOSE
		public RuleCall getCOMMENT_CLOSETerminalRuleCall_2() { return cCOMMENT_CLOSETerminalRuleCall_2; }

		//TAG_OPEN_START
		public RuleCall getTAG_OPEN_STARTTerminalRuleCall_3() { return cTAG_OPEN_STARTTerminalRuleCall_3; }

		//TAG_CLOSE_START
		public RuleCall getTAG_CLOSE_STARTTerminalRuleCall_4() { return cTAG_CLOSE_STARTTerminalRuleCall_4; }

		//PRINT_START
		public RuleCall getPRINT_STARTTerminalRuleCall_5() { return cPRINT_STARTTerminalRuleCall_5; }

		//PRINT_END
		public RuleCall getPRINT_ENDTerminalRuleCall_6() { return cPRINT_ENDTerminalRuleCall_6; }
	}

	public class TextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Text");
		private final Assignment cTextAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTextTextContentParserRuleCall_0 = (RuleCall)cTextAssignment.eContents().get(0);
		
		//Text:
		//	text=TextContent;
		public ParserRule getRule() { return rule; }

		//text=TextContent
		public Assignment getTextAssignment() { return cTextAssignment; }

		//TextContent
		public RuleCall getTextTextContentParserRuleCall_0() { return cTextTextContentParserRuleCall_0; }
	}

	public class TextContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TextContent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cCHARTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cCOMMENT_CLOSETerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cPRINT_ENDTerminalRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cTAG_ENDTerminalRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		
		//TextContent returns ecore::EString:
		//	=> (CHAR | COMMENT_CLOSE | PRINT_END | TAG_END)+;
		public ParserRule getRule() { return rule; }

		//=> (CHAR | COMMENT_CLOSE | PRINT_END | TAG_END)+
		public Group getGroup() { return cGroup; }

		//CHAR | COMMENT_CLOSE | PRINT_END | TAG_END
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//CHAR
		public RuleCall getCHARTerminalRuleCall_0_0() { return cCHARTerminalRuleCall_0_0; }

		//COMMENT_CLOSE
		public RuleCall getCOMMENT_CLOSETerminalRuleCall_0_1() { return cCOMMENT_CLOSETerminalRuleCall_0_1; }

		//PRINT_END
		public RuleCall getPRINT_ENDTerminalRuleCall_0_2() { return cPRINT_ENDTerminalRuleCall_0_2; }

		//TAG_END
		public RuleCall getTAG_ENDTerminalRuleCall_0_3() { return cTAG_ENDTerminalRuleCall_0_3; }
	}

	public class CommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Comment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCommentAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cCOMMENT_OPENTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cTextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTextCommentContentParserRuleCall_2_0 = (RuleCall)cTextAssignment_2.eContents().get(0);
		private final RuleCall cCOMMENT_CLOSETerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//Comment:
		//	{Comment} COMMENT_OPEN text=CommentContent COMMENT_CLOSE;
		public ParserRule getRule() { return rule; }

		//{Comment} COMMENT_OPEN text=CommentContent COMMENT_CLOSE
		public Group getGroup() { return cGroup; }

		//{Comment}
		public Action getCommentAction_0() { return cCommentAction_0; }

		//COMMENT_OPEN
		public RuleCall getCOMMENT_OPENTerminalRuleCall_1() { return cCOMMENT_OPENTerminalRuleCall_1; }

		//text=CommentContent
		public Assignment getTextAssignment_2() { return cTextAssignment_2; }

		//CommentContent
		public RuleCall getTextCommentContentParserRuleCall_2_0() { return cTextCommentContentParserRuleCall_2_0; }

		//COMMENT_CLOSE
		public RuleCall getCOMMENT_CLOSETerminalRuleCall_3() { return cCOMMENT_CLOSETerminalRuleCall_3; }
	}

	public class CommentContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CommentContent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCHARTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCOMMENT_OPENTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTAG_OPEN_STARTTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTAG_CLOSE_STARTTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPRINT_STARTTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cPRINT_ENDTerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cTAG_ENDTerminalRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//CommentContent returns ecore::EString:
		//	(CHAR | COMMENT_OPEN | TAG_OPEN_START | TAG_CLOSE_START | PRINT_START | PRINT_END | TAG_END)*;
		public ParserRule getRule() { return rule; }

		//(CHAR | COMMENT_OPEN | TAG_OPEN_START | TAG_CLOSE_START | PRINT_START | PRINT_END | TAG_END)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//CHAR
		public RuleCall getCHARTerminalRuleCall_0() { return cCHARTerminalRuleCall_0; }

		//COMMENT_OPEN
		public RuleCall getCOMMENT_OPENTerminalRuleCall_1() { return cCOMMENT_OPENTerminalRuleCall_1; }

		//TAG_OPEN_START
		public RuleCall getTAG_OPEN_STARTTerminalRuleCall_2() { return cTAG_OPEN_STARTTerminalRuleCall_2; }

		//TAG_CLOSE_START
		public RuleCall getTAG_CLOSE_STARTTerminalRuleCall_3() { return cTAG_CLOSE_STARTTerminalRuleCall_3; }

		//PRINT_START
		public RuleCall getPRINT_STARTTerminalRuleCall_4() { return cPRINT_STARTTerminalRuleCall_4; }

		//PRINT_END
		public RuleCall getPRINT_ENDTerminalRuleCall_5() { return cPRINT_ENDTerminalRuleCall_5; }

		//TAG_END
		public RuleCall getTAG_ENDTerminalRuleCall_6() { return cTAG_ENDTerminalRuleCall_6; }
	}
	
	
	private final FreemarkerElements pFreemarker;
	private final ElementElements pElement;
	private final PrintElements pPrint;
	private final PrintContentElements pPrintContent;
	private final TagElements pTag;
	private final TagPartElements pTagPart;
	private final OpenTagElements pOpenTag;
	private final CloseTagElements pCloseTag;
	private final TagContentElements pTagContent;
	private final TextElements pText;
	private final TextContentElements pTextContent;
	private final CommentElements pComment;
	private final CommentContentElements pCommentContent;
	private final TerminalRule tCOMMENT_OPEN;
	private final TerminalRule tCOMMENT_CLOSE;
	private final TerminalRule tTAG_OPEN_START;
	private final TerminalRule tTAG_CLOSE_START;
	private final TerminalRule tTAG_END;
	private final TerminalRule tPRINT_START;
	private final TerminalRule tPRINT_END;
	private final TerminalRule tCHAR;
	
	private final Grammar grammar;

	@Inject
	public FreemarkerEditorGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pFreemarker = new FreemarkerElements();
		this.pElement = new ElementElements();
		this.pPrint = new PrintElements();
		this.pPrintContent = new PrintContentElements();
		this.pTag = new TagElements();
		this.pTagPart = new TagPartElements();
		this.pOpenTag = new OpenTagElements();
		this.pCloseTag = new CloseTagElements();
		this.pTagContent = new TagContentElements();
		this.pText = new TextElements();
		this.pTextContent = new TextContentElements();
		this.pComment = new CommentElements();
		this.pCommentContent = new CommentContentElements();
		this.tCOMMENT_OPEN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COMMENT_OPEN");
		this.tCOMMENT_CLOSE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COMMENT_CLOSE");
		this.tTAG_OPEN_START = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TAG_OPEN_START");
		this.tTAG_CLOSE_START = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TAG_CLOSE_START");
		this.tTAG_END = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TAG_END");
		this.tPRINT_START = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PRINT_START");
		this.tPRINT_END = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PRINT_END");
		this.tCHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CHAR");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.github.FreemarkerEditor".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Freemarker:
	//	elements+=Element*;
	public FreemarkerElements getFreemarkerAccess() {
		return pFreemarker;
	}
	
	public ParserRule getFreemarkerRule() {
		return getFreemarkerAccess().getRule();
	}

	//Element:
	//	Print | Comment | Tag | Text;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}

	//Print:
	//	PRINT_START expression=PrintContent PRINT_END;
	public PrintElements getPrintAccess() {
		return pPrint;
	}
	
	public ParserRule getPrintRule() {
		return getPrintAccess().getRule();
	}

	//PrintContent returns ecore::EString:
	//	(CHAR | COMMENT_OPEN | COMMENT_CLOSE | TAG_OPEN_START | TAG_CLOSE_START | PRINT_START | TAG_END)+;
	public PrintContentElements getPrintContentAccess() {
		return pPrintContent;
	}
	
	public ParserRule getPrintContentRule() {
		return getPrintContentAccess().getRule();
	}

	//Tag:
	//	openTag=OpenTag elements+=Element* closeTag=CloseTag;
	public TagElements getTagAccess() {
		return pTag;
	}
	
	public ParserRule getTagRule() {
		return getTagAccess().getRule();
	}

	//TagPart:
	//	OpenTag | CloseTag;
	public TagPartElements getTagPartAccess() {
		return pTagPart;
	}
	
	public ParserRule getTagPartRule() {
		return getTagPartAccess().getRule();
	}

	//OpenTag:
	//	TAG_OPEN_START content=TagContent TAG_END;
	public OpenTagElements getOpenTagAccess() {
		return pOpenTag;
	}
	
	public ParserRule getOpenTagRule() {
		return getOpenTagAccess().getRule();
	}

	//CloseTag:
	//	TAG_CLOSE_START content=TagContent TAG_END;
	public CloseTagElements getCloseTagAccess() {
		return pCloseTag;
	}
	
	public ParserRule getCloseTagRule() {
		return getCloseTagAccess().getRule();
	}

	//TagContent returns ecore::EString:
	//	(CHAR | COMMENT_OPEN | COMMENT_CLOSE | TAG_OPEN_START | TAG_CLOSE_START | PRINT_START | PRINT_END)+;
	public TagContentElements getTagContentAccess() {
		return pTagContent;
	}
	
	public ParserRule getTagContentRule() {
		return getTagContentAccess().getRule();
	}

	//Text:
	//	text=TextContent;
	public TextElements getTextAccess() {
		return pText;
	}
	
	public ParserRule getTextRule() {
		return getTextAccess().getRule();
	}

	//TextContent returns ecore::EString:
	//	=> (CHAR | COMMENT_CLOSE | PRINT_END | TAG_END)+;
	public TextContentElements getTextContentAccess() {
		return pTextContent;
	}
	
	public ParserRule getTextContentRule() {
		return getTextContentAccess().getRule();
	}

	//Comment:
	//	{Comment} COMMENT_OPEN text=CommentContent COMMENT_CLOSE;
	public CommentElements getCommentAccess() {
		return pComment;
	}
	
	public ParserRule getCommentRule() {
		return getCommentAccess().getRule();
	}

	//CommentContent returns ecore::EString:
	//	(CHAR | COMMENT_OPEN | TAG_OPEN_START | TAG_CLOSE_START | PRINT_START | PRINT_END | TAG_END)*;
	public CommentContentElements getCommentContentAccess() {
		return pCommentContent;
	}
	
	public ParserRule getCommentContentRule() {
		return getCommentContentAccess().getRule();
	}

	//terminal COMMENT_OPEN:
	//	"<#--";
	public TerminalRule getCOMMENT_OPENRule() {
		return tCOMMENT_OPEN;
	} 

	//terminal COMMENT_CLOSE:
	//	"-->";
	public TerminalRule getCOMMENT_CLOSERule() {
		return tCOMMENT_CLOSE;
	} 

	//terminal TAG_OPEN_START:
	//	"<#";
	public TerminalRule getTAG_OPEN_STARTRule() {
		return tTAG_OPEN_START;
	} 

	//terminal TAG_CLOSE_START:
	//	"</#";
	public TerminalRule getTAG_CLOSE_STARTRule() {
		return tTAG_CLOSE_START;
	} 

	//terminal TAG_END:
	//	">";
	public TerminalRule getTAG_ENDRule() {
		return tTAG_END;
	} 

	//terminal PRINT_START:
	//	"${";
	public TerminalRule getPRINT_STARTRule() {
		return tPRINT_START;
	} 

	//terminal PRINT_END:
	//	"}";
	public TerminalRule getPRINT_ENDRule() {
		return tPRINT_END;
	} 

	//terminal CHAR:
	//	"--" | "</" | !(COMMENT_OPEN | COMMENT_CLOSE | TAG_OPEN_START | TAG_CLOSE_START | PRINT_START | PRINT_END | TAG_END);
	public TerminalRule getCHARRule() {
		return tCHAR;
	} 
}
