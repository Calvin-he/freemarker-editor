/*
* generated by Xtext
*/
grammar InternalFreemarkerEditor;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package org.github.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.github.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.github.services.FreemarkerEditorGrammarAccess;

}

@parser::members {
 
 	private FreemarkerEditorGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(FreemarkerEditorGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleFreemarker
entryRuleFreemarker 
:
{ before(grammarAccess.getFreemarkerRule()); }
	 ruleFreemarker
{ after(grammarAccess.getFreemarkerRule()); } 
	 EOF 
;

// Rule Freemarker
ruleFreemarker
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFreemarkerAccess().getElementsAssignment()); }
(rule__Freemarker__ElementsAssignment)*
{ after(grammarAccess.getFreemarkerAccess().getElementsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleElement
entryRuleElement 
:
{ before(grammarAccess.getElementRule()); }
	 ruleElement
{ after(grammarAccess.getElementRule()); } 
	 EOF 
;

// Rule Element
ruleElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getElementAccess().getAlternatives()); }
(rule__Element__Alternatives)
{ after(grammarAccess.getElementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrint
entryRulePrint 
:
{ before(grammarAccess.getPrintRule()); }
	 rulePrint
{ after(grammarAccess.getPrintRule()); } 
	 EOF 
;

// Rule Print
rulePrint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrintAccess().getGroup()); }
(rule__Print__Group__0)
{ after(grammarAccess.getPrintAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrintContent
entryRulePrintContent 
:
{ before(grammarAccess.getPrintContentRule()); }
	 rulePrintContent
{ after(grammarAccess.getPrintContentRule()); } 
	 EOF 
;

// Rule PrintContent
rulePrintContent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
(
{ before(grammarAccess.getPrintContentAccess().getAlternatives()); }
(rule__PrintContent__Alternatives)
{ after(grammarAccess.getPrintContentAccess().getAlternatives()); }
)
(
{ before(grammarAccess.getPrintContentAccess().getAlternatives()); }
(rule__PrintContent__Alternatives)*
{ after(grammarAccess.getPrintContentAccess().getAlternatives()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTag
entryRuleTag 
:
{ before(grammarAccess.getTagRule()); }
	 ruleTag
{ after(grammarAccess.getTagRule()); } 
	 EOF 
;

// Rule Tag
ruleTag
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTagAccess().getGroup()); }
(rule__Tag__Group__0)
{ after(grammarAccess.getTagAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleOpenTag
entryRuleOpenTag 
:
{ before(grammarAccess.getOpenTagRule()); }
	 ruleOpenTag
{ after(grammarAccess.getOpenTagRule()); } 
	 EOF 
;

// Rule OpenTag
ruleOpenTag
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOpenTagAccess().getGroup()); }
(rule__OpenTag__Group__0)
{ after(grammarAccess.getOpenTagAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCloseTag
entryRuleCloseTag 
:
{ before(grammarAccess.getCloseTagRule()); }
	 ruleCloseTag
{ after(grammarAccess.getCloseTagRule()); } 
	 EOF 
;

// Rule CloseTag
ruleCloseTag
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCloseTagAccess().getGroup()); }
(rule__CloseTag__Group__0)
{ after(grammarAccess.getCloseTagAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTagContent
entryRuleTagContent 
:
{ before(grammarAccess.getTagContentRule()); }
	 ruleTagContent
{ after(grammarAccess.getTagContentRule()); } 
	 EOF 
;

// Rule TagContent
ruleTagContent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
(
{ before(grammarAccess.getTagContentAccess().getAlternatives()); }
(rule__TagContent__Alternatives)
{ after(grammarAccess.getTagContentAccess().getAlternatives()); }
)
(
{ before(grammarAccess.getTagContentAccess().getAlternatives()); }
(rule__TagContent__Alternatives)*
{ after(grammarAccess.getTagContentAccess().getAlternatives()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleText
entryRuleText 
:
{ before(grammarAccess.getTextRule()); }
	 ruleText
{ after(grammarAccess.getTextRule()); } 
	 EOF 
;

// Rule Text
ruleText
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTextAccess().getTextAssignment()); }
(rule__Text__TextAssignment)
{ after(grammarAccess.getTextAccess().getTextAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTextContent
entryRuleTextContent 
:
{ before(grammarAccess.getTextContentRule()); }
	 ruleTextContent
{ after(grammarAccess.getTextContentRule()); } 
	 EOF 
;

// Rule TextContent
ruleTextContent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
(
{ before(grammarAccess.getTextContentAccess().getGroup()); }
(rule__TextContent__Group__0)
{ after(grammarAccess.getTextContentAccess().getGroup()); }
)
(
{ before(grammarAccess.getTextContentAccess().getGroup()); }
(rule__TextContent__Group__0)*
{ after(grammarAccess.getTextContentAccess().getGroup()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComment
entryRuleComment 
:
{ before(grammarAccess.getCommentRule()); }
	 ruleComment
{ after(grammarAccess.getCommentRule()); } 
	 EOF 
;

// Rule Comment
ruleComment
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCommentAccess().getGroup()); }
(rule__Comment__Group__0)
{ after(grammarAccess.getCommentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCommentContent
entryRuleCommentContent 
:
{ before(grammarAccess.getCommentContentRule()); }
	 ruleCommentContent
{ after(grammarAccess.getCommentContentRule()); } 
	 EOF 
;

// Rule CommentContent
ruleCommentContent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCommentContentAccess().getAlternatives()); }
(rule__CommentContent__Alternatives)*
{ after(grammarAccess.getCommentContentAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Element__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementAccess().getPrintParserRuleCall_0()); }
	rulePrint
{ after(grammarAccess.getElementAccess().getPrintParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getElementAccess().getCommentParserRuleCall_1()); }
	ruleComment
{ after(grammarAccess.getElementAccess().getCommentParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getElementAccess().getTagParserRuleCall_2()); }
	ruleTag
{ after(grammarAccess.getElementAccess().getTagParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getElementAccess().getTextParserRuleCall_3()); }
	ruleText
{ after(grammarAccess.getElementAccess().getTextParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrintContent__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrintContentAccess().getCHARTerminalRuleCall_0()); }
	RULE_CHAR
{ after(grammarAccess.getPrintContentAccess().getCHARTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPrintContentAccess().getCOMMENT_OPENTerminalRuleCall_1()); }
	RULE_COMMENT_OPEN
{ after(grammarAccess.getPrintContentAccess().getCOMMENT_OPENTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getPrintContentAccess().getCOMMENT_CLOSETerminalRuleCall_2()); }
	RULE_COMMENT_CLOSE
{ after(grammarAccess.getPrintContentAccess().getCOMMENT_CLOSETerminalRuleCall_2()); }
)

    |(
{ before(grammarAccess.getPrintContentAccess().getTAG_OPEN_STARTTerminalRuleCall_3()); }
	RULE_TAG_OPEN_START
{ after(grammarAccess.getPrintContentAccess().getTAG_OPEN_STARTTerminalRuleCall_3()); }
)

    |(
{ before(grammarAccess.getPrintContentAccess().getTAG_CLOSE_STARTTerminalRuleCall_4()); }
	RULE_TAG_CLOSE_START
{ after(grammarAccess.getPrintContentAccess().getTAG_CLOSE_STARTTerminalRuleCall_4()); }
)

    |(
{ before(grammarAccess.getPrintContentAccess().getPRINT_STARTTerminalRuleCall_5()); }
	RULE_PRINT_START
{ after(grammarAccess.getPrintContentAccess().getPRINT_STARTTerminalRuleCall_5()); }
)

    |(
{ before(grammarAccess.getPrintContentAccess().getTAG_ENDTerminalRuleCall_6()); }
	RULE_TAG_END
{ after(grammarAccess.getPrintContentAccess().getTAG_ENDTerminalRuleCall_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TagContent__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTagContentAccess().getCHARTerminalRuleCall_0()); }
	RULE_CHAR
{ after(grammarAccess.getTagContentAccess().getCHARTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTagContentAccess().getCOMMENT_OPENTerminalRuleCall_1()); }
	RULE_COMMENT_OPEN
{ after(grammarAccess.getTagContentAccess().getCOMMENT_OPENTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getTagContentAccess().getCOMMENT_CLOSETerminalRuleCall_2()); }
	RULE_COMMENT_CLOSE
{ after(grammarAccess.getTagContentAccess().getCOMMENT_CLOSETerminalRuleCall_2()); }
)

    |(
{ before(grammarAccess.getTagContentAccess().getTAG_OPEN_STARTTerminalRuleCall_3()); }
	RULE_TAG_OPEN_START
{ after(grammarAccess.getTagContentAccess().getTAG_OPEN_STARTTerminalRuleCall_3()); }
)

    |(
{ before(grammarAccess.getTagContentAccess().getTAG_CLOSE_STARTTerminalRuleCall_4()); }
	RULE_TAG_CLOSE_START
{ after(grammarAccess.getTagContentAccess().getTAG_CLOSE_STARTTerminalRuleCall_4()); }
)

    |(
{ before(grammarAccess.getTagContentAccess().getPRINT_STARTTerminalRuleCall_5()); }
	RULE_PRINT_START
{ after(grammarAccess.getTagContentAccess().getPRINT_STARTTerminalRuleCall_5()); }
)

    |(
{ before(grammarAccess.getTagContentAccess().getPRINT_ENDTerminalRuleCall_6()); }
	RULE_PRINT_END
{ after(grammarAccess.getTagContentAccess().getPRINT_ENDTerminalRuleCall_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TextContent__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextContentAccess().getCHARTerminalRuleCall_0_0()); }
	RULE_CHAR
{ after(grammarAccess.getTextContentAccess().getCHARTerminalRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getTextContentAccess().getCOMMENT_CLOSETerminalRuleCall_0_1()); }
	RULE_COMMENT_CLOSE
{ after(grammarAccess.getTextContentAccess().getCOMMENT_CLOSETerminalRuleCall_0_1()); }
)

    |(
{ before(grammarAccess.getTextContentAccess().getPRINT_ENDTerminalRuleCall_0_2()); }
	RULE_PRINT_END
{ after(grammarAccess.getTextContentAccess().getPRINT_ENDTerminalRuleCall_0_2()); }
)

    |(
{ before(grammarAccess.getTextContentAccess().getTAG_ENDTerminalRuleCall_0_3()); }
	RULE_TAG_END
{ after(grammarAccess.getTextContentAccess().getTAG_ENDTerminalRuleCall_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CommentContent__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommentContentAccess().getCHARTerminalRuleCall_0()); }
	RULE_CHAR
{ after(grammarAccess.getCommentContentAccess().getCHARTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getCommentContentAccess().getCOMMENT_OPENTerminalRuleCall_1()); }
	RULE_COMMENT_OPEN
{ after(grammarAccess.getCommentContentAccess().getCOMMENT_OPENTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getCommentContentAccess().getTAG_OPEN_STARTTerminalRuleCall_2()); }
	RULE_TAG_OPEN_START
{ after(grammarAccess.getCommentContentAccess().getTAG_OPEN_STARTTerminalRuleCall_2()); }
)

    |(
{ before(grammarAccess.getCommentContentAccess().getTAG_CLOSE_STARTTerminalRuleCall_3()); }
	RULE_TAG_CLOSE_START
{ after(grammarAccess.getCommentContentAccess().getTAG_CLOSE_STARTTerminalRuleCall_3()); }
)

    |(
{ before(grammarAccess.getCommentContentAccess().getPRINT_STARTTerminalRuleCall_4()); }
	RULE_PRINT_START
{ after(grammarAccess.getCommentContentAccess().getPRINT_STARTTerminalRuleCall_4()); }
)

    |(
{ before(grammarAccess.getCommentContentAccess().getPRINT_ENDTerminalRuleCall_5()); }
	RULE_PRINT_END
{ after(grammarAccess.getCommentContentAccess().getPRINT_ENDTerminalRuleCall_5()); }
)

    |(
{ before(grammarAccess.getCommentContentAccess().getTAG_ENDTerminalRuleCall_6()); }
	RULE_TAG_END
{ after(grammarAccess.getCommentContentAccess().getTAG_ENDTerminalRuleCall_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Print__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Print__Group__0__Impl
	rule__Print__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrintAccess().getPRINT_STARTTerminalRuleCall_0()); }
	RULE_PRINT_START
{ after(grammarAccess.getPrintAccess().getPRINT_STARTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Print__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Print__Group__1__Impl
	rule__Print__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrintAccess().getExpressionAssignment_1()); }
(rule__Print__ExpressionAssignment_1)
{ after(grammarAccess.getPrintAccess().getExpressionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Print__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Print__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrintAccess().getPRINT_ENDTerminalRuleCall_2()); }
	RULE_PRINT_END
{ after(grammarAccess.getPrintAccess().getPRINT_ENDTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Tag__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tag__Group__0__Impl
	rule__Tag__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Tag__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTagAccess().getOpenTagAssignment_0()); }
(rule__Tag__OpenTagAssignment_0)
{ after(grammarAccess.getTagAccess().getOpenTagAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Tag__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tag__Group__1__Impl
	rule__Tag__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Tag__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTagAccess().getElementsAssignment_1()); }
(rule__Tag__ElementsAssignment_1)*
{ after(grammarAccess.getTagAccess().getElementsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Tag__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tag__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Tag__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTagAccess().getCloseTagAssignment_2()); }
(rule__Tag__CloseTagAssignment_2)
{ after(grammarAccess.getTagAccess().getCloseTagAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__OpenTag__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpenTag__Group__0__Impl
	rule__OpenTag__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OpenTag__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpenTagAccess().getTAG_OPEN_STARTTerminalRuleCall_0()); }
	RULE_TAG_OPEN_START
{ after(grammarAccess.getOpenTagAccess().getTAG_OPEN_STARTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OpenTag__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpenTag__Group__1__Impl
	rule__OpenTag__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OpenTag__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpenTagAccess().getContentAssignment_1()); }
(rule__OpenTag__ContentAssignment_1)
{ after(grammarAccess.getOpenTagAccess().getContentAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OpenTag__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpenTag__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OpenTag__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpenTagAccess().getTAG_ENDTerminalRuleCall_2()); }
	RULE_TAG_END
{ after(grammarAccess.getOpenTagAccess().getTAG_ENDTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__CloseTag__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CloseTag__Group__0__Impl
	rule__CloseTag__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CloseTag__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCloseTagAccess().getTAG_CLOSE_STARTTerminalRuleCall_0()); }
	RULE_TAG_CLOSE_START
{ after(grammarAccess.getCloseTagAccess().getTAG_CLOSE_STARTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CloseTag__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CloseTag__Group__1__Impl
	rule__CloseTag__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CloseTag__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCloseTagAccess().getContentAssignment_1()); }
(rule__CloseTag__ContentAssignment_1)
{ after(grammarAccess.getCloseTagAccess().getContentAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CloseTag__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CloseTag__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CloseTag__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCloseTagAccess().getTAG_ENDTerminalRuleCall_2()); }
	RULE_TAG_END
{ after(grammarAccess.getCloseTagAccess().getTAG_ENDTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__TextContent__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TextContent__Group__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TextContent__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextContentAccess().getAlternatives_0()); }
(rule__TextContent__Alternatives_0)
{ after(grammarAccess.getTextContentAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Comment__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comment__Group__0__Impl
	rule__Comment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comment__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommentAccess().getCommentAction_0()); }
(

)
{ after(grammarAccess.getCommentAccess().getCommentAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Comment__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comment__Group__1__Impl
	rule__Comment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Comment__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommentAccess().getCOMMENT_OPENTerminalRuleCall_1()); }
	RULE_COMMENT_OPEN
{ after(grammarAccess.getCommentAccess().getCOMMENT_OPENTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Comment__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comment__Group__2__Impl
	rule__Comment__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Comment__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommentAccess().getTextAssignment_2()); }
(rule__Comment__TextAssignment_2)
{ after(grammarAccess.getCommentAccess().getTextAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Comment__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comment__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comment__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommentAccess().getCOMMENT_CLOSETerminalRuleCall_3()); }
	RULE_COMMENT_CLOSE
{ after(grammarAccess.getCommentAccess().getCOMMENT_CLOSETerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}











rule__Freemarker__ElementsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFreemarkerAccess().getElementsElementParserRuleCall_0()); }
	ruleElement{ after(grammarAccess.getFreemarkerAccess().getElementsElementParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Print__ExpressionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrintAccess().getExpressionPrintContentParserRuleCall_1_0()); }
	rulePrintContent{ after(grammarAccess.getPrintAccess().getExpressionPrintContentParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Tag__OpenTagAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTagAccess().getOpenTagOpenTagParserRuleCall_0_0()); }
	ruleOpenTag{ after(grammarAccess.getTagAccess().getOpenTagOpenTagParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Tag__ElementsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTagAccess().getElementsElementParserRuleCall_1_0()); }
	ruleElement{ after(grammarAccess.getTagAccess().getElementsElementParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Tag__CloseTagAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTagAccess().getCloseTagCloseTagParserRuleCall_2_0()); }
	ruleCloseTag{ after(grammarAccess.getTagAccess().getCloseTagCloseTagParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OpenTag__ContentAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpenTagAccess().getContentTagContentParserRuleCall_1_0()); }
	ruleTagContent{ after(grammarAccess.getOpenTagAccess().getContentTagContentParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CloseTag__ContentAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCloseTagAccess().getContentTagContentParserRuleCall_1_0()); }
	ruleTagContent{ after(grammarAccess.getCloseTagAccess().getContentTagContentParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Text__TextAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextAccess().getTextTextContentParserRuleCall_0()); }
	ruleTextContent{ after(grammarAccess.getTextAccess().getTextTextContentParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comment__TextAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommentAccess().getTextCommentContentParserRuleCall_2_0()); }
	ruleCommentContent{ after(grammarAccess.getCommentAccess().getTextCommentContentParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_COMMENT_OPEN : '<#--';

RULE_COMMENT_CLOSE : '-->';

RULE_TAG_OPEN_START : '<#';

RULE_TAG_CLOSE_START : '</#';

RULE_TAG_END : '>';

RULE_PRINT_START : '${';

RULE_PRINT_END : '}';

RULE_CHAR : ('--'|'</'|~((RULE_COMMENT_OPEN|RULE_COMMENT_CLOSE|RULE_TAG_OPEN_START|RULE_TAG_CLOSE_START|RULE_PRINT_START|RULE_PRINT_END|RULE_TAG_END)));


